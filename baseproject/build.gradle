apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../dependencies.gradle'
apply from: '../resourcepath.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion

    defaultConfig {
        applicationId "com.sa.baseproject"
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "app_name", "BaseProject"
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    flavorDimensions "default"

    productFlavors {
        stage {
            applicationId "com.sa.baseproject.stage"
            versionCode 3
            versionName "1.0"
        }
        dev {
            applicationId "com.sa.baseproject.dev"
            versionCode 2
            versionName "1.0"
        }
        prod {
            applicationId "com.sa.baseproject"
            versionCode 1
            versionName "1.0"
        }
    }


    signingConfigs {

        release {
            try {
                keyAlias keystoreProperties['KEY_ALIAS']
                keyPassword keystoreProperties['KEY_PASSWORD']
                storeFile file(keystoreProperties['STORE_FILE'])
                storePassword keystoreProperties['STORE_PASSWORD']
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }


    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                renameAPK(variant)
            }
        }
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            res.srcDirs = sourceDirectoriesPath.values()
        }
    }
    buildToolsVersion '28.0.3'
    androidExtensions {
        experimental = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    lintOptions {
        baseline file("lint-baseline.xml")
        disable 'GoogleAppIndexingWarning'
//            abortOnError true       // if set to true (default), stops the build if errors are found.
//            checkAllWarnings true
        warningsAsErrors true
        disable 'PrivateResource'
        //        quiet true    //    set to true to turn off analysis progress reporting by lint
        //        ignoreWarnings true    //    if true, only report errors
    }

//    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
//        kotlinOptions {
//            jvmTarget = "1.8"
//            allWarningsAsErrors = true
//        }
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0-alpha01', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Android Support libs
    implementation androidSupportDependencies.values()

    // Retrofit, GSON and OkHttp
    implementation retrofitGSONOkHttpDependencies.values()

    // Architecture Libs
    implementation architectureDependencies.values()
    kapt architectureKapt.values()

    // Coroutine
    implementation coroutineDependencies.values()

    // Picasso\Glide user base on your needs.
    implementation picasoGlideDependencies.values()

    // SDP and SSP libs for dimensions
    implementation sdpSspDependencies.values()

    //GCM libs
    implementation playSeriviceDependencies.values()

    //Paging Libs

    implementation pagingDependencies.values()

    // Kotlin libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.media:media:1.1.0-rc01"

}
repositories {
    mavenCentral()
    google()
}


static def renameAPK(variant) {
    variant.outputs.all { output ->
        def formattedDate = new Date().format('dd-MM-YYYY')
        def projectName = variant.mergedFlavor.resValues.get('app_name').getValue()
        def projectVersionName = "_v" + variant.productFlavors.get(0).versionName
        def projectBuildCode = "_b" + variant.productFlavors.get(0).versionCode
        def buildDate = "_d" + formattedDate
        def flavorsName = "_" + variant.productFlavors.get(0).name
        def flavorsType = "_" + variant.variantData.variantConfiguration.buildType.name
        def fileName = projectName + projectVersionName + projectBuildCode + buildDate + flavorsName + flavorsType + ".apk"
        outputFileName = fileName
    }
}
